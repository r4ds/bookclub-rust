---
engine: knitr
title: "13. Functional Language Features: Iterators and Closures"
---

# Learning objectives

::: nonincremental
- Closures
- Iterators
- Improve our I/O program from last chapter
- 'Zero-cost' abstractions
:::

::: notes
- You can add notes on each slide with blocks like this!
- Load a deck in the browser and type "s" to see these notes.
:::

# Closures

## Closure Capture Their Environment

- Recall in R, every function is a closure.  

- Functions store their enclosing environment, allowing them to access variables from outside their own scope.

```
example_closure <- function(x) {
    y <- 10
    function() {
        x + y
    }
}

closure_instance <- example_closure(5)
closure_instance()  # Returns 15
```

## Rust closures 

- In Rust, we have closures that can capture their environment as well. 
- But we have to manage this due to memory safety

## SLIDE

# SLIDE SECTION

## SLIDE

## SLIDE
