---
engine: knitr
title: "7. Managing Growing Projects with Packages, Crates, and Modules"
---

# Learning objectives

By the end of this session, you should be able to:

::: nonincremental
- Understand and use Rust's module system (`mod`, `pub`, `use`).
- Differentiate between packages, crates, and modules.
- Implement Cargo workspaces for multi-crate projects.
- Apply best practices for managing and organizing Rust projects.
:::

::: notes
Encourage questions about any points that feel unclear.
:::

# Overview of Packages, Crates, and Modules

## Key Concepts

- **Package**: A bundle of one or more crates, defined by a `Cargo.toml` file.
- **Crate**: A compilation unit in Rust (binary or library).
- **Module**: A way to organize code and control scope and visibility.
- **Workspace**: A collection of interrelated packages managed together.

# Creating and Using Packages

## Setting Up a Package

```console
$ cargo new my_project
$ cd my_project
```

- Creates a new package with a `Cargo.toml` and a default binary crate.
- Binary crate root: `src/main.rs`.
- To create a library crate, add a `src/lib.rs`.

## Example `Cargo.toml`
``` toml
[package]
name = "my_project"
version = "0.1.0"
edition = "2021"

[dependencies]
rand = "0.8.5"
```

# Working with Modules
## Accessing Module Items
``` rust
crate::front_of_house::hosting::add_to_waitlist();
```
- Use absolute paths starting with crate

``` rust
front_of_house::hosting::add_to_waitlist();
```
- or, use relative paths starting with the module name

## Controlling Visibility
``` rust
pub mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}
```
- By default, items are private
- Use `pub` to make modules, functions, and fields accessible

# Using `use` for Convenience
## Simplify Paths
``` rust
use crate::front_of_house::hosting;

hosting::add_to_waitlist();
```
- Use use to shorten paths.
- Works within the scope it's defined.

## Re-exporting with `pub use`
``` rust
pub use crate::front_of_house::hosting;

hosting::add_to_waitlist();
```
- Makes items available for external users.

# Organizing Modules Across Files
## Splitting Modules
- Define a module in `src/lib.rs`:
``` rust
mod front_of_house;
```
- Create `src/front_of_house.rs`:
``` rust
pub mod hosting {
    pub fn add_to_waitlist() {}
}
```

- Nest submodules in `src/front_of_house/hosting.rs`.

# Summary
- Rust's module system (`mod`, `pub`, `use`) is powerful for organizing code.
- Packages bundle functionality, crates define scope, and modules control visibility.
- Cargo workspaces help manage complex projects with multiple packages.

Next steps: Practice by creating a workspace with two crates and exploring the module system further!
