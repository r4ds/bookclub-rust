[
  {
    "objectID": "slides/16-fearless_concurrency.html#slide",
    "href": "slides/16-fearless_concurrency.html#slide",
    "title": "16. Fearless Concurrency",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "16. Fearless Concurrency"
    ]
  },
  {
    "objectID": "slides/16-fearless_concurrency.html#slide-1",
    "href": "slides/16-fearless_concurrency.html#slide-1",
    "title": "16. Fearless Concurrency",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "16. Fearless Concurrency"
    ]
  },
  {
    "objectID": "slides/16-fearless_concurrency.html#slide-2",
    "href": "slides/16-fearless_concurrency.html#slide-2",
    "title": "16. Fearless Concurrency",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "16. Fearless Concurrency"
    ]
  },
  {
    "objectID": "slides/16-fearless_concurrency.html#slide-3",
    "href": "slides/16-fearless_concurrency.html#slide-3",
    "title": "16. Fearless Concurrency",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "16. Fearless Concurrency"
    ]
  },
  {
    "objectID": "slides/18-patterns_and_matching.html#slide",
    "href": "slides/18-patterns_and_matching.html#slide",
    "title": "18. Patterns and Matching",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "18. Patterns and Matching"
    ]
  },
  {
    "objectID": "slides/18-patterns_and_matching.html#slide-1",
    "href": "slides/18-patterns_and_matching.html#slide-1",
    "title": "18. Patterns and Matching",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "18. Patterns and Matching"
    ]
  },
  {
    "objectID": "slides/18-patterns_and_matching.html#slide-2",
    "href": "slides/18-patterns_and_matching.html#slide-2",
    "title": "18. Patterns and Matching",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "18. Patterns and Matching"
    ]
  },
  {
    "objectID": "slides/18-patterns_and_matching.html#slide-3",
    "href": "slides/18-patterns_and_matching.html#slide-3",
    "title": "18. Patterns and Matching",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "18. Patterns and Matching"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#rust",
    "href": "slides/01-getting_started.html#rust",
    "title": "1. Getting Started",
    "section": "Rust",
    "text": "Rust\n\nA language empowering everyone to build reliable and efficient software.\n\n\nLet’s get started.\nRust says it’s a ‘language empowering …’ The key words that stick out for me are ‘reliable’ and ‘efficient.’\nIf you’re like me, those are the main selling points you’ve heard related to rust. Rust is efficient, both in terms of run time and development time. And Rust is reliable, eliminating bugs related to memory management that come up in languages like C.\nBy the end of this book, we should have an idea of how well Rust holds up to those statements.",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#set-up",
    "href": "slides/01-getting_started.html#set-up",
    "title": "1. Getting Started",
    "section": "Set up",
    "text": "Set up\n\nInstall Rust\nChoose an editor\nInstall extensions\n\n\nI assume you can install Rust but if you have issues we can help shortly.\nIt’s likely many of us have only used R and RStudio. If that’s the case, I want to point out some differences you’ll encounter.\nBoth R and RStudio come with everything you need to write R code. However, with other languges and editors, you often need to install tools specific to that language. For example, language servers, debuggers, and package managers. You most definitely want to install the Rust tooling for whatever editor you use.\nIf you aren’t sure, I recommend using Visual Studio Code with the rust-analyzer extension. You will also need an extension with debugging support. You can find a link in the rust-analyzer extension. Again, if you need help with this, we can get to that shortly.",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#hello-world",
    "href": "slides/01-getting_started.html#hello-world",
    "title": "1. Getting Started",
    "section": "Hello, World",
    "text": "Hello, World\nfn main() {\n    println!(\"Hello, world!\");\n}\n\nfn main() is required in main.rs\nThe ! in println! means macro\nThe ; is required\n\n\nThis is the obligatory hello world. Since this is a simple program, it’s clear what’s going on.\nBut there are some details worth pointing out.\nEvery rust program has a main.rs file with a main function in it. This is the entrypoint to the program, the first thing that get’s run.\nThe ! in println! means println is a macro. A macro is sort of like a function. That’s a sufficient understanding for now. We’ll get to the details of what a macro is later in the book.\nLastly, note the ; which indicated the end of an expression. This is generally required for every statement you write.",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#compile-and-run",
    "href": "slides/01-getting_started.html#compile-and-run",
    "title": "1. Getting Started",
    "section": "Compile and run",
    "text": "Compile and run\nrustc main.rs\n./main\n\nRust is a compiled language so we have to run the compiler rustc first.\nIf you’ve never used a compiled language before, compiling is the process of translating the Rust code you write into a language the computer can read. With interpreted languages like R or Python, this translation happens on the fly. But with a compiled language, you have to translate the program before it can run.\nOnce compiled, you’ll have an executable file that you can now run. On Mac/Linux, it will be main. On Windows, it will be main.exe.",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#cargo",
    "href": "slides/01-getting_started.html#cargo",
    "title": "1. Getting Started",
    "section": "Cargo",
    "text": "Cargo\n[package]\nname = \"hello_cargo\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\n\nUnlike R, where installing dependencies is built into the language, Rust has a separate program for this called cargo. With cargo, you define your dependencies, among other things, in a TOML file.",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#cargo-1",
    "href": "slides/01-getting_started.html#cargo-1",
    "title": "1. Getting Started",
    "section": "Cargo",
    "text": "Cargo\n\n\n\n\ncargo new project_name\nCargo.toml\ncargo.lock\n\n\n\nproject_name/.Rproj\nDESCRIPTION\nrenv.lock\n\n\n\n\nMore than installing dependencies though, cargo helps you manage your Rust projects. It let’s you create projects, install dependencies, compile, and run your project.\nA cargo project is like an RStudio project.\nCargo.toml is like DESCRIPTION in an R package.\nAnd cargo tracks dependency versions with cargo.lock, which is like renv.lock.",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/01-getting_started.html#discussion",
    "href": "slides/01-getting_started.html#discussion",
    "title": "1. Getting Started",
    "section": "Discussion",
    "text": "Discussion\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "1. Getting Started"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#topics-covered",
    "href": "slides/03-common_programming_concepts.html#topics-covered",
    "title": "3. Common Programming Concepts",
    "section": "Topics Covered:",
    "text": "Topics Covered:\n\n\nData Types\n\nScalar\nCompound\n\nVariables, Mutability, Constants, and Shadowing\nFunctions and Control Flow\nError Handling",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#integers",
    "href": "slides/03-common_programming_concepts.html#integers",
    "title": "3. Common Programming Concepts",
    "section": "Integers",
    "text": "Integers\n\n\n\n\n\nLength\nSigned\nUnsigned\n\n\n\n\n8-bit\ni8\nu8\n\n\n16-bit\ni16\nu16\n\n\n32-bit\ni32\nu32\n\n\n64-bit\ni64\nu64\n\n\n128-bit\ni128\nu128\n\n\narch\nisize\nusize\n\n\n\n\n\n\nSigned variants can store numbers from -(2n - 1) to 2n - 1 - 1 inclusive\n\ni8: -(27) to 27 - 1, which equals -128 to 127.\nu8: 0- 2n - 1, that is 0 to 28 - 1, which equals 0 to 255",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#integer-overflow",
    "href": "slides/03-common_programming_concepts.html#integer-overflow",
    "title": "3. Common Programming Concepts",
    "section": "Integer overflow",
    "text": "Integer overflow\nRust uses two’s complement wrapping to handle integer overflow silently. However, it offers explicit ways to manage overflow:\n\nwrapping_* methods: Always wrap values (e.g., wrapping_add).\nchecked_* methods: Return None if overflow occurs.\noverflowing_* methods: Return the result along with a boolean indicating overflow.\nsaturating_* methods: Clamp the result to the type’s minimum or maximum value.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#floating-point-numbers",
    "href": "slides/03-common_programming_concepts.html#floating-point-numbers",
    "title": "3. Common Programming Concepts",
    "section": "Floating-Point Numbers",
    "text": "Floating-Point Numbers\nTypes: f32 and f64 (primitive types)\n  let pi: f64 = 3.14159;\n\n\nAll floating-point types are signed.\nf32: single-precision float\nf64: double precision float",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#booleans-and-characters",
    "href": "slides/03-common_programming_concepts.html#booleans-and-characters",
    "title": "3. Common Programming Concepts",
    "section": "Booleans and Characters",
    "text": "Booleans and Characters\nBoolean: bool\n  let flag = true;\nCharacter: char 1\n  let emoji = '😻';\n\n\nchar type is four bytes in size and represents a Unicode Scalar Value.\nIt can represent more than just ASCII\n\n\n\n\n\nNote that we specify char literals with single quotes, as opposed to string literals, which use double quotes.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#tuples",
    "href": "slides/03-common_programming_concepts.html#tuples",
    "title": "3. Common Programming Concepts",
    "section": "Tuples",
    "text": "Tuples\nGroup values of different types:\n  let tup: (i32, f64, u8) = (500, 6.4, 1);\n  let (x, y, z) = tup; // Destructuring\n\nTuples have a fixed length.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#arrays",
    "href": "slides/03-common_programming_concepts.html#arrays",
    "title": "3. Common Programming Concepts",
    "section": "Arrays",
    "text": "Arrays\nFixed-length collections of the same type:\n  let arr = [1, 2, 3, 4, 5];\n  let first = arr[0];",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#initializing-arrays",
    "href": "slides/03-common_programming_concepts.html#initializing-arrays",
    "title": "3. Common Programming Concepts",
    "section": "Initializing arrays",
    "text": "Initializing arrays\n  let a = [3; 5]; // [3, 3, 3, 3, 3]\nShort-hand:\n\n\nvalue of elements; then number of elements\n\n\nlet a = [3; 5];",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#accessing-array-elements",
    "href": "slides/03-common_programming_concepts.html#accessing-array-elements",
    "title": "3. Common Programming Concepts",
    "section": "Accessing Array Elements",
    "text": "Accessing Array Elements\nYou can access elements of an array using indexing:\n\n\n0-based indexing (e.g., x[0])\n\n\nfn main() {     \n    let a = [1, 2, 3, 4, 5];      \n    let first = a[0];     \n    let second = a[1]; \n}",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#immutable-variables",
    "href": "slides/03-common_programming_concepts.html#immutable-variables",
    "title": "3. Common Programming Concepts",
    "section": "Immutable Variables",
    "text": "Immutable Variables\nVariables in Rust are immutable by default:\n  let x = 5;\n  x = 6; // Error: Cannot assign to immutable variable",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#making-variables-mutable",
    "href": "slides/03-common_programming_concepts.html#making-variables-mutable",
    "title": "3. Common Programming Concepts",
    "section": "Making Variables Mutable",
    "text": "Making Variables Mutable\nUse the mut keyword to make variables mutable:\n  let mut y = 10;\n  y += 5; // Now valid because `y` is mutable",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#constants",
    "href": "slides/03-common_programming_concepts.html#constants",
    "title": "3. Common Programming Concepts",
    "section": "Constants",
    "text": "Constants\nDeclared with const and are always immutable:\n  const MAX_SCORE: u32 = 100_000;\n\n\nMust always be annotated with a type\nCan be declared in global or function scope\nCannot be computed at runtime",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#shadowing",
    "href": "slides/03-common_programming_concepts.html#shadowing",
    "title": "3. Common Programming Concepts",
    "section": "Shadowing",
    "text": "Shadowing\nShadowing allows reusing a variable name:\n  let x = 5;\n  let x = x + 1; // Shadows the previous `x`\n  {\n      let x = x * 2;\n      println!(\"Inner scope x: {x}\");\n  }\n  println!(\"Outer scope x: {x}\");",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#differences-between-mut-and-shadowing",
    "href": "slides/03-common_programming_concepts.html#differences-between-mut-and-shadowing",
    "title": "3. Common Programming Concepts",
    "section": "Differences between mut and Shadowing",
    "text": "Differences between mut and Shadowing\n\n\n\n\nmut\nshadowing\n\n\n\n\nType\nSame type\nCan change type (use of let)\n\n\nUse of let\nWhen first declared\nAll instances of variable use",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#defining-functions",
    "href": "slides/03-common_programming_concepts.html#defining-functions",
    "title": "3. Common Programming Concepts",
    "section": "Defining Functions",
    "text": "Defining Functions\nfn main() {\n    println!(\"Hello, world!\");\n    another_function();\n}\n\nfn another_function() {\n    println!(\"This is another function.\");\n}",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#function-parameters",
    "href": "slides/03-common_programming_concepts.html#function-parameters",
    "title": "3. Common Programming Concepts",
    "section": "Function Parameters",
    "text": "Function Parameters\nFunctions can accept parameters/arguments:\n  fn add(a: i32, b: i32) -&gt; i32 {\n      a + b\n  }\n  println!(\"{}\", add(3, 5));",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#return-values",
    "href": "slides/03-common_programming_concepts.html#return-values",
    "title": "3. Common Programming Concepts",
    "section": "Return Values",
    "text": "Return Values\nReturn the last expression from the function body:\n  fn square(x: i32) -&gt; i32 {\n      x * x\n  }",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#if-expressions",
    "href": "slides/03-common_programming_concepts.html#if-expressions",
    "title": "3. Common Programming Concepts",
    "section": "if Expressions",
    "text": "if Expressions\nfn main() {\n    let number = 3;\n\n    if number &lt; 5 {\n        println!(\"Condition is true\");\n    } else {\n        println!(\"Condition is false\");\n    }\n}\n\nRust will NOT automatically try to convert non-Boolean types to a Boolean.\nYou must be explicit and always provide if with a Boolean as its condition.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#else-if-for-multiple-conditions",
    "href": "slides/03-common_programming_concepts.html#else-if-for-multiple-conditions",
    "title": "3. Common Programming Concepts",
    "section": "else if for Multiple Conditions",
    "text": "else if for Multiple Conditions\nfn main() {\n    let number = 6;\n\n    if number % 4 == 0 {\n        println!(\"Divisible by 4\");\n    } else if number % 3 == 0 {\n        println!(\"Divisible by 3\");\n    } else {\n        println!(\"Not divisible by 4 or 3\");\n    }\n}\n\nRust only executes the block for the first true condition, and once it finds one, it doesn’t even check the rest.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#using-if-in-a-let-statement",
    "href": "slides/03-common_programming_concepts.html#using-if-in-a-let-statement",
    "title": "3. Common Programming Concepts",
    "section": "Using if in a let Statement",
    "text": "Using if in a let Statement\nif is an expression, hence we can use it on the RHS of a let statement to assign the outcome to a variable\nfn main() {\n    let condition = true;\n    let number = if condition { 5 } else { 6 };\n\n    println!(\"The value of number is: {number}\");\n}\n\n\nnumber variable will be bound to a value based on the outcome of the if expression\nresult values from each arm of the if must be the same type",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#for-example",
    "href": "slides/03-common_programming_concepts.html#for-example",
    "title": "3. Common Programming Concepts",
    "section": "For example:",
    "text": "For example:\nfn main() {\n    let condition = true;\n\n    let number = if condition { 5 } else { \"six\" };\n\n    println!(\"The value of number is: {number}\");\n}\nThis throws an error because the types of the values in the if and else blocks are different.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#infinite-loop",
    "href": "slides/03-common_programming_concepts.html#infinite-loop",
    "title": "3. Common Programming Concepts",
    "section": "Infinite loop",
    "text": "Infinite loop\nfn main() {\n    loop {\n        println!(\"Running forever...\");\n    }\n}",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#breaking-a-loop",
    "href": "slides/03-common_programming_concepts.html#breaking-a-loop",
    "title": "3. Common Programming Concepts",
    "section": "Breaking a loop",
    "text": "Breaking a loop\nfn main() {\n    let mut counter = 0;\n    let result = loop {\n        counter += 1;\n        if counter == 10 {\n            break counter * 2;\n        }\n    };\n    println!(\"Result: {result}\");\n}\n\nCode after a break or return is never executed.\nThe compiler treats a break expression and a return expression as having the value unit, or ().",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#while-loop",
    "href": "slides/03-common_programming_concepts.html#while-loop",
    "title": "3. Common Programming Concepts",
    "section": "while Loop",
    "text": "while Loop\nWhile a condition evaluates to true, the code runs; otherwise, it exits the loop.\nfn main() {\n    let mut number = 3;\n    while number != 0 {\n        println!(\"{number}!\");\n        number -= 1;\n    }\n    println!(\"LIFTOFF!!!\");\n}",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#for-loop",
    "href": "slides/03-common_programming_concepts.html#for-loop",
    "title": "3. Common Programming Concepts",
    "section": "for Loop",
    "text": "for Loop\nfor are the most commonly used loop construct in Rust.\nfn main() {\n    let a = [10, 20, 30, 40, 50];\n    for element in a {\n        println!(\"The value is: {element}\");\n    }\n}",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#loop-labels-to-disambiguate",
    "href": "slides/03-common_programming_concepts.html#loop-labels-to-disambiguate",
    "title": "3. Common Programming Concepts",
    "section": "loop Labels to Disambiguate",
    "text": "loop Labels to Disambiguate\nLabeling loops when we have loops inside loops 1\nfn main() {\n    let mut count = 0;\n    'counting_up: loop {\n        println!(\"count = {count}\");\n        let mut remaining = 10;\n\n        loop {\n            println!(\"remaining = {remaining}\");\n            if remaining == 9 {\n                break;\n            }\n            if count == 2 {\n                break 'counting_up;\n            }\n            remaining -= 1;\n        }\n\n        count += 1;\n    }\n    println!(\"End count = {count}\");\n}\nThe break 'counting_up; statement will exit the outer loop.\n\n\n\nNotice the single quotes before the label name.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#integer-overflow-1",
    "href": "slides/03-common_programming_concepts.html#integer-overflow-1",
    "title": "3. Common Programming Concepts",
    "section": "Integer Overflow",
    "text": "Integer Overflow\n\nDebug mode: Panics on overflow.\nRelease mode: Uses two’s complement wrapping.\n\nwrapping_* methods: Always wrap values (e.g., wrapping_add).\nchecked_* methods: Return None if overflow occurs.\noverflowing_* methods: Return the result along with a boolean indicating overflow.\nsaturating_* methods: Clamp the result to the type’s minimum or maximum value.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#invalid-array-access",
    "href": "slides/03-common_programming_concepts.html#invalid-array-access",
    "title": "3. Common Programming Concepts",
    "section": "Invalid Array Access",
    "text": "Invalid Array Access\nfn main() {\n    let arr = [1, 2, 3, 4, 5];\n    let index = 10; // Out of bounds\n    let element = arr[index]; // Causes panic\n}",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/03-common_programming_concepts.html#section",
    "href": "slides/03-common_programming_concepts.html#section",
    "title": "3. Common Programming Concepts",
    "section": "",
    "text": "Feature\nRust\nR\nPython\nC/C++\n\n\n\n\nArrays\nFixed-size, homogeneous types, defined as [T; N].\nHomogeneous data, multidimensional (using array()).\nHomogeneous data, implemented via NumPy (numpy.array).\nFixed-size, homogeneous, defined as T array[N].\n\n\nVectors\nA growable collection with Vec&lt;T&gt;.\n1D array, typically with c() or vector().\nLists mimic vectors, but for true vector operations, use NumPy arrays.\nNo native vector, use std::vector from the Standard Library (C++).\n\n\nTuples\nFixed-length, immutable collection: (i32, f64).\nNot commonly used, lists behave like tuples.\nImmutable, ordered sequence: (1, 2, \"text\").\nUse std::tuple (C++17+) or structures.\n\n\nMatrices\nNot native; use nested Vec&lt;Vec&lt;T&gt;&gt; or external libraries like nalgebra.\n2D structure (matrix()). Can extend to 3D with array().\nImplemented with NumPy as 2D arrays: numpy.matrix or numpy.array.\n2D arrays as T matrix[rows][cols] or use libraries like Eigen in C++.\n\n\nMutability\nVectors (Vec&lt;T&gt;) are mutable; tuples are immutable.\nVectors are mutable; matrices can be altered in-place.\nLists and arrays are mutable; tuples are immutable.\nArrays and vectors (std::vector) are mutable. Tuples are immutable in C++17+.\n\n\nIndexing\n0-based indexing (e.g., x[0]).\n1-based indexing (e.g., x[1]).\n0-based indexing (e.g., x[0]).\n0-based indexing (e.g., x[0]).\n\n\nSize Flexibility\nArrays are fixed, vectors grow dynamically.\nVectors and lists are dynamic. Arrays and matrices have fixed sizes.\nLists and NumPy arrays are dynamic; tuples are fixed size.\nArrays are fixed; std::vector is dynamic.\n\n\n\nA contiguous mutable array type, written as Vec&lt;T&gt;, short for ‘vector’.",
    "crumbs": [
      "3. Common Programming Concepts"
    ]
  },
  {
    "objectID": "slides/19-advanced_features.html#slide",
    "href": "slides/19-advanced_features.html#slide",
    "title": "19. Advanced Features",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "19. Advanced Features"
    ]
  },
  {
    "objectID": "slides/19-advanced_features.html#slide-1",
    "href": "slides/19-advanced_features.html#slide-1",
    "title": "19. Advanced Features",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "19. Advanced Features"
    ]
  },
  {
    "objectID": "slides/19-advanced_features.html#slide-2",
    "href": "slides/19-advanced_features.html#slide-2",
    "title": "19. Advanced Features",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "19. Advanced Features"
    ]
  },
  {
    "objectID": "slides/19-advanced_features.html#slide-3",
    "href": "slides/19-advanced_features.html#slide-3",
    "title": "19. Advanced Features",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "19. Advanced Features"
    ]
  },
  {
    "objectID": "slides/09-error_handling.html#slide",
    "href": "slides/09-error_handling.html#slide",
    "title": "9. Error Handling",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "9. Error Handling"
    ]
  },
  {
    "objectID": "slides/09-error_handling.html#slide-1",
    "href": "slides/09-error_handling.html#slide-1",
    "title": "9. Error Handling",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "9. Error Handling"
    ]
  },
  {
    "objectID": "slides/09-error_handling.html#slide-2",
    "href": "slides/09-error_handling.html#slide-2",
    "title": "9. Error Handling",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "9. Error Handling"
    ]
  },
  {
    "objectID": "slides/09-error_handling.html#slide-3",
    "href": "slides/09-error_handling.html#slide-3",
    "title": "9. Error Handling",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "9. Error Handling"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#topics-covered",
    "href": "slides/05-using_structs_to_structure_related_data.html#topics-covered",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Topics covered",
    "text": "Topics covered\n\n\nStructs\nMethods\nOther associated functions",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#defining-structs",
    "href": "slides/05-using_structs_to_structure_related_data.html#defining-structs",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Defining Structs",
    "text": "Defining Structs\nstruct User {\n    active: bool,\n    username: String,\n    email: String,\n    sign_in_count: u64,\n}\n\nStructs are similar to tuples, but with named parts\nSimilar to R named lists, key : value pairs.\nDefines a new type",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#instantiating-structs",
    "href": "slides/05-using_structs_to_structure_related_data.html#instantiating-structs",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Instantiating Structs",
    "text": "Instantiating Structs\nfn main() {\n    let mut user1 = User {\n        email: String::from(\"someone@example.com\"),\n        username: String::from(\"someusername123\"),\n        active: true,\n        sign_in_count: 1,\n    };\n    user1.email = String::from(\"anotheremail@example.com\");\n    println!(\"User1's email: {}\",user1.email)\n}\n\nInstantiate (create) by specifying values for each key\nTo get values, use the . notation. compare to R : user1$email\nTo change values, the entire instance must be mutable.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#constructor",
    "href": "slides/05-using_structs_to_structure_related_data.html#constructor",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Constructor",
    "text": "Constructor\nfn build_user(email: String, username: String) -&gt; User {\n    User {\n        active: true,\n        username: username,\n        email: email,\n        sign_in_count: 1,\n    }\n}\n\nStruct is returned as it is the last statement\nWe will see shortly that this will be clearer as an associated function",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#shorthand",
    "href": "slides/05-using_structs_to_structure_related_data.html#shorthand",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Shorthand",
    "text": "Shorthand\nfn build_user(email: String, username: String) -&gt; User {\n    User {\n        active: true,\n        username,\n        email,\n        sign_in_count: 1,\n    }\n}\n\nIf variable name is same as field name:\n\nreplace var = var with just var\nfield init shorthand",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#struct-update-syntax",
    "href": "slides/05-using_structs_to_structure_related_data.html#struct-update-syntax",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Struct update syntax",
    "text": "Struct update syntax\nfn main() {\n    // --snip--\n\n    let user2 = User {\n        email: String::from(\"another@example.com\"),\n        ..user1\n    };\n}\n\nCreates a new User from an existing instance user1\nNote that this moves data!\n\nWe can no longer use user1 because we moved the username into user2\nIf we had also given a new username then user1 would ok.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#tuple-structs",
    "href": "slides/05-using_structs_to_structure_related_data.html#tuple-structs",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Tuple Structs",
    "text": "Tuple Structs\nstruct Color(i32, i32, i32);\nstruct Point(i32, i32, i32);\n\nfn main() {\n    let black = Color(0, 0, 0);\n    let origin = Point(0, 0, 0);\n}\n\nDefines distinct types for Color and Point\nAccess elements by destructuring\nAlternately can use .0 , .1 etc.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#unit-structs",
    "href": "slides/05-using_structs_to_structure_related_data.html#unit-structs",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Unit Structs",
    "text": "Unit Structs\nstruct AlwaysEqual;\n\nfn main() {\n    let subject = AlwaysEqual;\n}\n\nUseful for cases where you need a type with a singleton value. (Placeholders or markers)\nMore uses will be clearer when we discuss traits.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#references-in-struct",
    "href": "slides/05-using_structs_to_structure_related_data.html#references-in-struct",
    "title": "5. Using Structs to Structure Related Data",
    "section": "References in Struct",
    "text": "References in Struct\nstruct User {\n    active: bool,\n    username: &str,\n    email: &str,\n    sign_in_count: u64,\n}\n\nfn main() {\n    let user1 = User {\n        active: true,\n        username: \"someusername123\",\n        email: \"someone@example.com\",\n        sign_in_count: 1,\n    };\n}\n\nSeems reasonable ?\ntry it out!",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#ownership-of-struct-data",
    "href": "slides/05-using_structs_to_structure_related_data.html#ownership-of-struct-data",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Ownership of Struct Data",
    "text": "Ownership of Struct Data\n\nExamples so far used owned data (e.g. String)\nEnsures fields are valid as long as the struct is valid.\nStructs can store references, but this requires explicitly specifying lifetimes to ensure they remain valid (discussed in Chapter 10).",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#first-try",
    "href": "slides/05-using_structs_to_structure_related_data.html#first-try",
    "title": "5. Using Structs to Structure Related Data",
    "section": "First try",
    "text": "First try\nfn main() {\n    let width1 = 30;\n    let height1 = 50;\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(width1, height1)\n    );\n}\n\nfn area(width: u32, height: u32) -&gt; u32 {\n    width * height\n}\n\n\nSee seperate repo for example project\nOr use rust playground\n\n\n\nWas it width first or height? (Yeah it doesnt matter here but…)\nWe want area of rectangles, not two numbers",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#use-tuples",
    "href": "slides/05-using_structs_to_structure_related_data.html#use-tuples",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Use Tuples",
    "text": "Use Tuples\nfn main() {\n    let rect1 = (30, 50);\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(rect1)\n    );\n}\n\nfn area(dimensions: (u32, u32)) -&gt; u32 {\n    dimensions.0 * dimensions.1\n}\n\nCombined the two into a single object, but …\nWe dont even have argument names to help us now!",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#rectangle-struct",
    "href": "slides/05-using_structs_to_structure_related_data.html#rectangle-struct",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Rectangle struct",
    "text": "Rectangle struct\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        area(&rect1)\n    );\n}\n\nfn area(rectangle: &Rectangle) -&gt; u32 {\n    rectangle.width * rectangle.height\n}\n\narea function takes a Rectangle - clearer intent\nBit more verbose, but less error prone",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#printing-rectangles",
    "href": "slides/05-using_structs_to_structure_related_data.html#printing-rectangles",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Printing Rectangles",
    "text": "Printing Rectangles\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {}\", rect1);\n}\n\nTry this in the rust playground\n{} requires implementing std::fmt::Display trait.\n\nBuilt in types implement this, but not user types.\nGet helpful error message! Try {:?} instead!",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#debug-printing",
    "href": "slides/05-using_structs_to_structure_related_data.html#debug-printing",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Debug printing",
    "text": "Debug printing\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {rect1:?}\");\n}\n\nHmm.. “error[E0277]: Rectangle doesn’t implement Debug”\nBut:\n= help: the trait `Debug` is not implemented for `Rectangle`\n= note: add `#[derive(Debug)]` to `Rectangle` or manually `impl Debug for Rectangle`\nRust can do this automatically but we have to tell it to explicitly.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#try-it",
    "href": "slides/05-using_structs_to_structure_related_data.html#try-it",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Try it?",
    "text": "Try it?\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\"rect1 is {rect1:?}\");\n}\n\nRust’s helpful error messages can take us far!\nUse {:#?} to ‘pretty print’ the debug info",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#dbg-macro",
    "href": "slides/05-using_structs_to_structure_related_data.html#dbg-macro",
    "title": "5. Using Structs to Structure Related Data",
    "section": "dbg! Macro",
    "text": "dbg! Macro\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\nfn main() {\n    let scale = 2;\n    let rect1 = Rectangle {\n        width: dbg!(30 * scale), // dbg! captures this intermediate value\n        height: 50,\n    };\n    dbg!(&rect1);\n}\n\nTakes ownership but then returns the value - print values inside an expression aids in debugging complex expressions.\nPrints file and line number\nPrints to stderr rather then stdout\n\nRust Playground",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#more-traits",
    "href": "slides/05-using_structs_to_structure_related_data.html#more-traits",
    "title": "5. Using Structs to Structure Related Data",
    "section": "More traits",
    "text": "More traits\n\nAppendix C has more derivable traits.\nMore on traits in Chapter 10",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#defining-methods",
    "href": "slides/05-using_structs_to_structure_related_data.html#defining-methods",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Defining Methods",
    "text": "Defining Methods\n#[derive(Debug)]\nstruct Rectangle {\n    width: u32,\n    height: u32,\n}\n\nimpl Rectangle { //implementaiton block\n    fn area(&self) -&gt; u32 {\n        self.width * self.height\n    }\n} // end impl block\n\nfn main() {\n ...\n}\nRust Playground\n\nMethods are like functions but defined within the context of a struct, enum, or trait object using an impl block\nFirst parameter is always self.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#method-calls",
    "href": "slides/05-using_structs_to_structure_related_data.html#method-calls",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Method calls",
    "text": "Method calls\nfn main() {\n    let rect1 = Rectangle {\n        width: 30,\n        height: 50,\n    };\n\n    println!(\n        \"The area of the rectangle is {} square pixels.\",\n        rect1.area()\n    );\n}\n\nUses the . syntax, automatically passes in self\nNo need for -&gt; as in c++, Rust automatically dereferences as required to make this more ergonomic!\np1.distance(&p2);\n(&p1).distance(&p2); \\\\same but more verbose",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#self",
    "href": "slides/05-using_structs_to_structure_related_data.html#self",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Self",
    "text": "Self\n\n&self is shorthand for self : &Self\nSelf is shorthand for the object type. (Rectangle)\n&self or &mut self, borrowing, is most common\nusing just self and taking ownership is rare.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#associated-functions",
    "href": "slides/05-using_structs_to_structure_related_data.html#associated-functions",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Associated Functions",
    "text": "Associated Functions\nimpl Rectangle {\n    fn square(size: u32) -&gt; Self {\n        Self {\n            width: size,\n            height: size,\n        }\n    }\n}\n\nAssociated functions are defined in an impl block without self\nimpl organizes code related to the type in one place\nThese functions can refer to the Self type, and commonly do in ‘constructor’ functions as above.\nAssociated functions are called like this: Rectangle::square(3). This should be familiar! String::new().",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/05-using_structs_to_structure_related_data.html#other-notes",
    "href": "slides/05-using_structs_to_structure_related_data.html#other-notes",
    "title": "5. Using Structs to Structure Related Data",
    "section": "Other notes",
    "text": "Other notes\nimpl Rectangle {\n    fn area(&self) -&gt; u32 {\n        self.width * self.height\n    }\n}\n\nimpl Rectangle {\n    fn can_hold(&self, other: &Rectangle) -&gt; bool {\n        self.width &gt; other.width && self.height &gt; other.height\n    }\n}\n\nMethods can have more arguments then just self\nThere can be multiple impl blocks. Not needed here but this is useful for generics and traits in Chapter 10.",
    "crumbs": [
      "5. Using Structs to Structure Related Data"
    ]
  },
  {
    "objectID": "slides/20-final_project_building_a_multithreaded_web_server.html#slide",
    "href": "slides/20-final_project_building_a_multithreaded_web_server.html#slide",
    "title": "20. Final Project: Building a Multithreaded Web Server",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "20. Final Project: Building a Multithreaded Web Server"
    ]
  },
  {
    "objectID": "slides/20-final_project_building_a_multithreaded_web_server.html#slide-1",
    "href": "slides/20-final_project_building_a_multithreaded_web_server.html#slide-1",
    "title": "20. Final Project: Building a Multithreaded Web Server",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "20. Final Project: Building a Multithreaded Web Server"
    ]
  },
  {
    "objectID": "slides/20-final_project_building_a_multithreaded_web_server.html#slide-2",
    "href": "slides/20-final_project_building_a_multithreaded_web_server.html#slide-2",
    "title": "20. Final Project: Building a Multithreaded Web Server",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "20. Final Project: Building a Multithreaded Web Server"
    ]
  },
  {
    "objectID": "slides/20-final_project_building_a_multithreaded_web_server.html#slide-3",
    "href": "slides/20-final_project_building_a_multithreaded_web_server.html#slide-3",
    "title": "20. Final Project: Building a Multithreaded Web Server",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "20. Final Project: Building a Multithreaded Web Server"
    ]
  },
  {
    "objectID": "slides/11-writing_automated_tests.html#slide",
    "href": "slides/11-writing_automated_tests.html#slide",
    "title": "11. Writing Automated Tests",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "11. Writing Automated Tests"
    ]
  },
  {
    "objectID": "slides/11-writing_automated_tests.html#slide-1",
    "href": "slides/11-writing_automated_tests.html#slide-1",
    "title": "11. Writing Automated Tests",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "11. Writing Automated Tests"
    ]
  },
  {
    "objectID": "slides/11-writing_automated_tests.html#slide-2",
    "href": "slides/11-writing_automated_tests.html#slide-2",
    "title": "11. Writing Automated Tests",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "11. Writing Automated Tests"
    ]
  },
  {
    "objectID": "slides/11-writing_automated_tests.html#slide-3",
    "href": "slides/11-writing_automated_tests.html#slide-3",
    "title": "11. Writing Automated Tests",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "11. Writing Automated Tests"
    ]
  },
  {
    "objectID": "slides/13-functional_language_features_iterators_and_closures.html#slide",
    "href": "slides/13-functional_language_features_iterators_and_closures.html#slide",
    "title": "13. Functional Language Features: Iterators and Closures",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "13. Functional Language Features: Iterators and Closures"
    ]
  },
  {
    "objectID": "slides/13-functional_language_features_iterators_and_closures.html#slide-1",
    "href": "slides/13-functional_language_features_iterators_and_closures.html#slide-1",
    "title": "13. Functional Language Features: Iterators and Closures",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "13. Functional Language Features: Iterators and Closures"
    ]
  },
  {
    "objectID": "slides/13-functional_language_features_iterators_and_closures.html#slide-2",
    "href": "slides/13-functional_language_features_iterators_and_closures.html#slide-2",
    "title": "13. Functional Language Features: Iterators and Closures",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "13. Functional Language Features: Iterators and Closures"
    ]
  },
  {
    "objectID": "slides/13-functional_language_features_iterators_and_closures.html#slide-3",
    "href": "slides/13-functional_language_features_iterators_and_closures.html#slide-3",
    "title": "13. Functional Language Features: Iterators and Closures",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "13. Functional Language Features: Iterators and Closures"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#create-the-new-project",
    "href": "slides/02-programming_a_guessing_game.html#create-the-new-project",
    "title": "2. Programming a Guessing Game",
    "section": "Create the new Project",
    "text": "Create the new Project\n$ cargo new guessing_game\n$ cd guessing_game\n\nrecall, cargo is Rust’s package manager and build tool\ncargo new creates a new project with the given name\nby default, this creates a “Hello World” program",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#compile-and-run-it",
    "href": "slides/02-programming_a_guessing_game.html#compile-and-run-it",
    "title": "2. Programming a Guessing Game",
    "section": "Compile and run it",
    "text": "Compile and run it\n$ cargo run\n\ncargo run both compiles and runs the project\nyou should see “Hello, world!” output to your console\nyou can also just compile with cargo build",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#storing-values-with-variables",
    "href": "slides/02-programming_a_guessing_game.html#storing-values-with-variables",
    "title": "2. Programming a Guessing Game",
    "section": "Storing Values with Variables",
    "text": "Storing Values with Variables\nlet mut guess = String::new();\n\nadd this to the main function in src/main.rs\nuse let to create variables\nvariables are immutable by default\nuse let mut for mutable variable",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#receiving-user-input",
    "href": "slides/02-programming_a_guessing_game.html#receiving-user-input",
    "title": "2. Programming a Guessing Game",
    "section": "Receiving User Input",
    "text": "Receiving User Input\nuse std::io;\n// ...\nprintln!(\"Please input your guess.\");\nio::stdin().read_line(&mut guess);\n\ncall stdin().read_line(&mut guess) to get user input\ninput is appended to the empty guess string\n& indicates a reference to the variable\n&mut is necessary, because references are immutable by default",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#handling-potential-failure-with-result",
    "href": "slides/02-programming_a_guessing_game.html#handling-potential-failure-with-result",
    "title": "2. Programming a Guessing Game",
    "section": "Handling Potential Failure with Result",
    "text": "Handling Potential Failure with Result\nio::stdin()\n    .read_line(&mut guess)\n    .expect(\"Failed to read line\");\n\nread_line returns a Result type (either Ok or Err)\nuse .expect() to handle errors and crash if an error occurs",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#printing-values-with-println",
    "href": "slides/02-programming_a_guessing_game.html#printing-values-with-println",
    "title": "2. Programming a Guessing Game",
    "section": "Printing Values with println!",
    "text": "Printing Values with println!\nprintln!(\"You guessed: {guess}\");\n\nuse println! with placeholders ({}) for formatted output\ncombines user input and text in one statement",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#testing-the-first-part",
    "href": "slides/02-programming_a_guessing_game.html#testing-the-first-part",
    "title": "2. Programming a Guessing Game",
    "section": "Testing the First Part",
    "text": "Testing the First Part\n$ cargo run\n\nprogram now accepts input and prints the guess\ntest by entering values to see the output",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#code-checkpoint-1",
    "href": "slides/02-programming_a_guessing_game.html#code-checkpoint-1",
    "title": "2. Programming a Guessing Game",
    "section": "Code checkpoint 1",
    "text": "Code checkpoint 1\nuse std::io;\n\nfn main() {\n    let mut guess = String::new();\n    println!(\"Please input your guess.\");\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    println!(\"You guessed: {}\", guess);\n}",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#using-a-crate-to-get-more-functionality",
    "href": "slides/02-programming_a_guessing_game.html#using-a-crate-to-get-more-functionality",
    "title": "2. Programming a Guessing Game",
    "section": "Using a Crate to Get More Functionality",
    "text": "Using a Crate to Get More Functionality\n[dependencies]\nrand = \"0.8.5\"\n\nadd the rand crate to Cargo.toml under [dependencies]\ncargo build will fetch and compile external dependencies\nyou can also use cargo add to add dependencies\n\ne.g. cargo add rand",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#generating-a-random-number",
    "href": "slides/02-programming_a_guessing_game.html#generating-a-random-number",
    "title": "2. Programming a Guessing Game",
    "section": "Generating a Random Number",
    "text": "Generating a Random Number\nuse rand::Rng;\nlet secret_number = rand::thread_rng().gen_range(1..=100);\n\nthis code should now compile\nuse rand::Rng; brings the random number generator trait (Rng) into scope\nuse thread_rng() for random number generation",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#matching-the-guess-to-the-secret-number",
    "href": "slides/02-programming_a_guessing_game.html#matching-the-guess-to-the-secret-number",
    "title": "2. Programming a Guessing Game",
    "section": "Matching the Guess to the Secret Number",
    "text": "Matching the Guess to the Secret Number\nuse std::cmp::Ordering;\nmatch guess.cmp(&secret_number) {\n    Ordering::Less =&gt; println!(\"Too small!\"),\n    Ordering::Greater =&gt; println!(\"Too big!\"),\n    Ordering::Equal =&gt; println!(\"You win!\"),\n}\n\nuse cmp() from the standard library to compare guess with secret_number\ncmp() returns the Ordering enum, which has values (Less, Greater, or Equal)\nmatch will match the appropriate arm of the enum, and print “Too small”, “Too big”, or “You win!”",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#parsing-a-string-into-a-number",
    "href": "slides/02-programming_a_guessing_game.html#parsing-a-string-into-a-number",
    "title": "2. Programming a Guessing Game",
    "section": "Parsing a String into a Number",
    "text": "Parsing a String into a Number\nlet guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\nguess is a string, but we want to compare it to an integer\nuse trim() to remove unexpected whitespace from the string\nuse parse() to convert the string to an integer\nthis code should now compile",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#code-checkpoint-2",
    "href": "slides/02-programming_a_guessing_game.html#code-checkpoint-2",
    "title": "2. Programming a Guessing Game",
    "section": "Code Checkpoint 2",
    "text": "Code Checkpoint 2\nuse rand::Rng;\nuse std::{cmp::Ordering, io};\n\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n    let mut guess = String::new();\n\n    io::stdin()\n        .read_line(&mut guess)\n        .expect(\"Failed to read line\");\n\n    let guess: u32 = guess.trim().parse().expect(\"Please type a number!\");\n\n    println!(\"You guessed: {}\", guess);\n\n    match guess.cmp(&secret_number) {\n        Ordering::Less =&gt; println!(\"Too small!\"),\n        Ordering::Greater =&gt; println!(\"Too big!\"),\n        Ordering::Equal =&gt; println!(\"You win!\"),\n    }\n}",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#quitting-after-a-correct-guess",
    "href": "slides/02-programming_a_guessing_game.html#quitting-after-a-correct-guess",
    "title": "2. Programming a Guessing Game",
    "section": "Quitting After a Correct Guess",
    "text": "Quitting After a Correct Guess\nOrdering::Equal =&gt; {\n    println!(\"You win!\");\n    break;\n}\n\nwe can add additional logic to the Equal branch of the enum using {}\nadd a break statement to exit the loop when the guess is correct\nbreak exits both the loop and the program",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#handling-invalid-input",
    "href": "slides/02-programming_a_guessing_game.html#handling-invalid-input",
    "title": "2. Programming a Guessing Game",
    "section": "Handling Invalid Input",
    "text": "Handling Invalid Input\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) =&gt; num,\n    Err(_) =&gt; continue,\n};\n\ncurrently, we crash on an error by using .expect()\nwe could instead handle the error, by matching the Err enum\nreplace .expect() with match to handle possibility of non-numeric input\nif parsing fails (Err), ignore the guess and continue looping",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "slides/02-programming_a_guessing_game.html#final-code-checkpoint",
    "href": "slides/02-programming_a_guessing_game.html#final-code-checkpoint",
    "title": "2. Programming a Guessing Game",
    "section": "Final Code Checkpoint",
    "text": "Final Code Checkpoint\nuse rand::Rng;\nuse std::{cmp::Ordering, io};\n\nfn main() {\n    let secret_number = rand::thread_rng().gen_range(1..=100);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n        io::stdin()\n            .read_line(&mut guess)\n            .expect(\"Failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) =&gt; num,\n            Err(_) =&gt; continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less =&gt; println!(\"Too small!\"),\n            Ordering::Greater =&gt; println!(\"Too big!\"),\n            Ordering::Equal =&gt; {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}",
    "crumbs": [
      "2. Programming a Guessing Game"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is a companion for the book The Rust Programming Language by Steve Klabnik and Carol Nichols, with contributions from the Rust Community (copyright 2024).\nEach chapter title to the left is a link to a slide deck.\n\nThese slides are being developed by this club.\nEach deck will open in its own tab.\nYou may want to type “s” at the start of each deck to open the speaker notes.\nJoin the Data Science Learning Community to participate in the discussion!\n\nWe follow the Data Science Learning Community Code of Conduct.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "slides/00-club-intro.html#book-club-meetings",
    "href": "slides/00-club-intro.html#book-club-meetings",
    "title": "Club Meetings",
    "section": "Book club meetings",
    "text": "Book club meetings\n\nVolunteer leads discussion of a chapter\n\nThis is the best way to learn the material.\n\nPresentations:\n\nReview of material\nQuestions you have\nMaybe live demo\n\nMore info about editing: this github repo.\nRecorded, available on the Data Science Learning Community YouTube Channel (DSLC.video).\nSign up to present\n\n\nIn case this is your first book club here, this is how things work. We’ll meet weekly and have a presentation followed by a discussion.\nWe’re working through this book collaboratively so everyone is encouraged to present a session or two. Please have a look at the schedule ASAP. We need presenters for the next 2 weeks.",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/00-club-intro.html#pace",
    "href": "slides/00-club-intro.html#pace",
    "title": "Club Meetings",
    "section": "Pace",
    "text": "Pace\n\nGoal: 1 chapter/week\nOk to split overwhelming chapters\nOk to combine short chapters\nMeet every week except holidays, etc\n\nIdeally can discuss even if presenter unavailable\n\nMonday at 2:00 pm PST (2100 GMT)\n\n\nThe schedule will be consistent for the most part but if we need to make adjustments everyone will be notified well ahead of time. For example, we will most likely meet for one of the scheduled holiday breaks or combine 2 chapters to one week. Daylight savings in the spring comes right at the end of schedule and is particularly gnarly this year I’d like to finish before then.",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/00-club-intro.html#learning-objectives-los",
    "href": "slides/00-club-intro.html#learning-objectives-los",
    "title": "Club Meetings",
    "section": "Learning objectives (LOs)",
    "text": "Learning objectives (LOs)\n\nStudents who study with LOs in mind retain more.\nTips:\n\n“After today’s session, you will be able to…”\nVery roughly 1 per section.\n\n\n\nWhen writing your presentation it can help to define learning objectives. This can help you identify the key points of the chapter, which also helps everyone else. It’s not strictly required though so don’t stress about it.\n\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/21-appendix.html#slide",
    "href": "slides/21-appendix.html#slide",
    "title": "21. Appendix",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "21. Appendix"
    ]
  },
  {
    "objectID": "slides/21-appendix.html#slide-1",
    "href": "slides/21-appendix.html#slide-1",
    "title": "21. Appendix",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "21. Appendix"
    ]
  },
  {
    "objectID": "slides/21-appendix.html#slide-2",
    "href": "slides/21-appendix.html#slide-2",
    "title": "21. Appendix",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "21. Appendix"
    ]
  },
  {
    "objectID": "slides/21-appendix.html#slide-3",
    "href": "slides/21-appendix.html#slide-3",
    "title": "21. Appendix",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "21. Appendix"
    ]
  },
  {
    "objectID": "slides/15-smart_pointers.html#slide",
    "href": "slides/15-smart_pointers.html#slide",
    "title": "15. Smart Pointers",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "15. Smart Pointers"
    ]
  },
  {
    "objectID": "slides/15-smart_pointers.html#slide-1",
    "href": "slides/15-smart_pointers.html#slide-1",
    "title": "15. Smart Pointers",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "15. Smart Pointers"
    ]
  },
  {
    "objectID": "slides/15-smart_pointers.html#slide-2",
    "href": "slides/15-smart_pointers.html#slide-2",
    "title": "15. Smart Pointers",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "15. Smart Pointers"
    ]
  },
  {
    "objectID": "slides/15-smart_pointers.html#slide-3",
    "href": "slides/15-smart_pointers.html#slide-3",
    "title": "15. Smart Pointers",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "15. Smart Pointers"
    ]
  },
  {
    "objectID": "slides/17-object_oriented_programming_features_of_rust.html#slide",
    "href": "slides/17-object_oriented_programming_features_of_rust.html#slide",
    "title": "17. Object Oriented Programming Features of Rust",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "17. Object Oriented Programming Features of Rust"
    ]
  },
  {
    "objectID": "slides/17-object_oriented_programming_features_of_rust.html#slide-1",
    "href": "slides/17-object_oriented_programming_features_of_rust.html#slide-1",
    "title": "17. Object Oriented Programming Features of Rust",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "17. Object Oriented Programming Features of Rust"
    ]
  },
  {
    "objectID": "slides/17-object_oriented_programming_features_of_rust.html#slide-2",
    "href": "slides/17-object_oriented_programming_features_of_rust.html#slide-2",
    "title": "17. Object Oriented Programming Features of Rust",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "17. Object Oriented Programming Features of Rust"
    ]
  },
  {
    "objectID": "slides/17-object_oriented_programming_features_of_rust.html#slide-3",
    "href": "slides/17-object_oriented_programming_features_of_rust.html#slide-3",
    "title": "17. Object Oriented Programming Features of Rust",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "17. Object Oriented Programming Features of Rust"
    ]
  },
  {
    "objectID": "slides/06-enums_and_pattern_matching.html#slide",
    "href": "slides/06-enums_and_pattern_matching.html#slide",
    "title": "6. Enums and Pattern Matching",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "6. Enums and Pattern Matching"
    ]
  },
  {
    "objectID": "slides/06-enums_and_pattern_matching.html#slide-1",
    "href": "slides/06-enums_and_pattern_matching.html#slide-1",
    "title": "6. Enums and Pattern Matching",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "6. Enums and Pattern Matching"
    ]
  },
  {
    "objectID": "slides/06-enums_and_pattern_matching.html#slide-2",
    "href": "slides/06-enums_and_pattern_matching.html#slide-2",
    "title": "6. Enums and Pattern Matching",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "6. Enums and Pattern Matching"
    ]
  },
  {
    "objectID": "slides/06-enums_and_pattern_matching.html#slide-3",
    "href": "slides/06-enums_and_pattern_matching.html#slide-3",
    "title": "6. Enums and Pattern Matching",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "6. Enums and Pattern Matching"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#learning-objectives-1",
    "href": "slides/04-understanding_ownership.html#learning-objectives-1",
    "title": "4. Understanding Ownership",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nUnderstand Rust’s ownership system\nWork with the borrow checker\nImplement the right ownership model at the right time",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#moves",
    "href": "slides/04-understanding_ownership.html#moves",
    "title": "4. Understanding Ownership",
    "section": "Moves",
    "text": "Moves\nlet x = String::from(\"hello\");\nlet x2 = x;\nprintln!(\"{x}\");",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#moves-1",
    "href": "slides/04-understanding_ownership.html#moves-1",
    "title": "4. Understanding Ownership",
    "section": "Moves",
    "text": "Moves\nlet x = String::from(\"hello\");\ntake_ownership(x);\nprintln!(\"{x}\");\n\nfn take_ownership(_name: String) {\n  ()\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#moves-2",
    "href": "slides/04-understanding_ownership.html#moves-2",
    "title": "4. Understanding Ownership",
    "section": "Moves",
    "text": "Moves\nlet x = String::from(\"hello\");\ntake_ownership(x.clone());\nprintln!(\"{x}\");\n\nfn take_ownership(_name: String) {\n  ()\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#moves-3",
    "href": "slides/04-understanding_ownership.html#moves-3",
    "title": "4. Understanding Ownership",
    "section": "Moves",
    "text": "Moves",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#stack-vs-heap",
    "href": "slides/04-understanding_ownership.html#stack-vs-heap",
    "title": "4. Understanding Ownership",
    "section": "Stack vs Heap",
    "text": "Stack vs Heap\nlet x = 1;\nprintln!(\"{x}\");\nprintln!(\"{x}\");",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#stack",
    "href": "slides/04-understanding_ownership.html#stack",
    "title": "4. Understanding Ownership",
    "section": "Stack",
    "text": "Stack",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#heap",
    "href": "slides/04-understanding_ownership.html#heap",
    "title": "4. Understanding Ownership",
    "section": "Heap",
    "text": "Heap",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#boxnew",
    "href": "slides/04-understanding_ownership.html#boxnew",
    "title": "4. Understanding Ownership",
    "section": "Box::new()",
    "text": "Box::new()\nlet x = Box::new(1);\ntake_ownership(x);\nprintln!(\"{x}\");\n\nfn take_ownership(_name: Box&lt;i32&gt;) {\n  ()\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#boxnew-1",
    "href": "slides/04-understanding_ownership.html#boxnew-1",
    "title": "4. Understanding Ownership",
    "section": "Box::new()",
    "text": "Box::new()",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#immutable-references",
    "href": "slides/04-understanding_ownership.html#immutable-references",
    "title": "4. Understanding Ownership",
    "section": "Immutable references",
    "text": "Immutable references\nlet x = String::from(\"hello\");\nborrow(&x);\nprintln!(\"{x}\");\n\nfn borrow(_name: &String) {\n  ()\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#immutable-references-1",
    "href": "slides/04-understanding_ownership.html#immutable-references-1",
    "title": "4. Understanding Ownership",
    "section": "Immutable references",
    "text": "Immutable references",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#immutable-references-2",
    "href": "slides/04-understanding_ownership.html#immutable-references-2",
    "title": "4. Understanding Ownership",
    "section": "Immutable references",
    "text": "Immutable references",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#immutable-references-3",
    "href": "slides/04-understanding_ownership.html#immutable-references-3",
    "title": "4. Understanding Ownership",
    "section": "Immutable references",
    "text": "Immutable references\nlet x = String::from(\"hello\");\nlet x2 = &x;\n\nborrow(&x);\nprintln!(\"{x2}\");\n\nfn borrow(_name: &String) {\n  ()\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#immutable-references-4",
    "href": "slides/04-understanding_ownership.html#immutable-references-4",
    "title": "4. Understanding Ownership",
    "section": "Immutable references",
    "text": "Immutable references",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#mutable-references",
    "href": "slides/04-understanding_ownership.html#mutable-references",
    "title": "4. Understanding Ownership",
    "section": "Mutable references",
    "text": "Mutable references\nlet mut x = String::from(\"hello\");\n\nlet x2 = &x;\n\nborrow(&mut x);\n\nprintln!(\"{x2}\");\n\nfn borrow(_name: &mut String) {\n  ()\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#mutable-references-1",
    "href": "slides/04-understanding_ownership.html#mutable-references-1",
    "title": "4. Understanding Ownership",
    "section": "Mutable references",
    "text": "Mutable references",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#slices",
    "href": "slides/04-understanding_ownership.html#slices",
    "title": "4. Understanding Ownership",
    "section": "Slices",
    "text": "Slices",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#string-literals-are-slices",
    "href": "slides/04-understanding_ownership.html#string-literals-are-slices",
    "title": "4. Understanding Ownership",
    "section": "String literals are slices",
    "text": "String literals are slices\nlet hello = \"hello\";\nthere(hello);\n\nfn there(hello2: &str) {\n  println!(\"{hello2} there\")\n}",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/04-understanding_ownership.html#str-as-parameters",
    "href": "slides/04-understanding_ownership.html#str-as-parameters",
    "title": "4. Understanding Ownership",
    "section": "&str as parameters",
    "text": "&str as parameters\nlet hello = String::from(\"hello\");\nthere(&hello);\n\nfn there(hello2: &str) {\n  println!(\"{hello2} there\")\n}\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "4. Understanding Ownership"
    ]
  },
  {
    "objectID": "slides/14-more_about_cargo_and_cratesio.html#slide",
    "href": "slides/14-more_about_cargo_and_cratesio.html#slide",
    "title": "14. More about Cargo and Crates.io",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "14. More about Cargo and Crates.io"
    ]
  },
  {
    "objectID": "slides/14-more_about_cargo_and_cratesio.html#slide-1",
    "href": "slides/14-more_about_cargo_and_cratesio.html#slide-1",
    "title": "14. More about Cargo and Crates.io",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "14. More about Cargo and Crates.io"
    ]
  },
  {
    "objectID": "slides/14-more_about_cargo_and_cratesio.html#slide-2",
    "href": "slides/14-more_about_cargo_and_cratesio.html#slide-2",
    "title": "14. More about Cargo and Crates.io",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "14. More about Cargo and Crates.io"
    ]
  },
  {
    "objectID": "slides/14-more_about_cargo_and_cratesio.html#slide-3",
    "href": "slides/14-more_about_cargo_and_cratesio.html#slide-3",
    "title": "14. More about Cargo and Crates.io",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "14. More about Cargo and Crates.io"
    ]
  },
  {
    "objectID": "slides/10-generic_types_traits_and_lifetimes.html#slide",
    "href": "slides/10-generic_types_traits_and_lifetimes.html#slide",
    "title": "10. Generic Types, Traits, and Lifetimes",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "10. Generic Types, Traits, and Lifetimes"
    ]
  },
  {
    "objectID": "slides/10-generic_types_traits_and_lifetimes.html#slide-1",
    "href": "slides/10-generic_types_traits_and_lifetimes.html#slide-1",
    "title": "10. Generic Types, Traits, and Lifetimes",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "10. Generic Types, Traits, and Lifetimes"
    ]
  },
  {
    "objectID": "slides/10-generic_types_traits_and_lifetimes.html#slide-2",
    "href": "slides/10-generic_types_traits_and_lifetimes.html#slide-2",
    "title": "10. Generic Types, Traits, and Lifetimes",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "10. Generic Types, Traits, and Lifetimes"
    ]
  },
  {
    "objectID": "slides/10-generic_types_traits_and_lifetimes.html#slide-3",
    "href": "slides/10-generic_types_traits_and_lifetimes.html#slide-3",
    "title": "10. Generic Types, Traits, and Lifetimes",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "10. Generic Types, Traits, and Lifetimes"
    ]
  },
  {
    "objectID": "slides/12-an_io_project_building_a_command_line_program.html#slide",
    "href": "slides/12-an_io_project_building_a_command_line_program.html#slide",
    "title": "12. An I/O Project: Building a Command Line Program",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "12. An I/O Project: Building a Command Line Program"
    ]
  },
  {
    "objectID": "slides/12-an_io_project_building_a_command_line_program.html#slide-1",
    "href": "slides/12-an_io_project_building_a_command_line_program.html#slide-1",
    "title": "12. An I/O Project: Building a Command Line Program",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "12. An I/O Project: Building a Command Line Program"
    ]
  },
  {
    "objectID": "slides/12-an_io_project_building_a_command_line_program.html#slide-2",
    "href": "slides/12-an_io_project_building_a_command_line_program.html#slide-2",
    "title": "12. An I/O Project: Building a Command Line Program",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "12. An I/O Project: Building a Command Line Program"
    ]
  },
  {
    "objectID": "slides/12-an_io_project_building_a_command_line_program.html#slide-3",
    "href": "slides/12-an_io_project_building_a_command_line_program.html#slide-3",
    "title": "12. An I/O Project: Building a Command Line Program",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "12. An I/O Project: Building a Command Line Program"
    ]
  },
  {
    "objectID": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide",
    "href": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide",
    "title": "7. Managing Growing Projects with Packages, Crates, and Modules",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "7. Managing Growing Projects with Packages, Crates, and Modules"
    ]
  },
  {
    "objectID": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide-1",
    "href": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide-1",
    "title": "7. Managing Growing Projects with Packages, Crates, and Modules",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "7. Managing Growing Projects with Packages, Crates, and Modules"
    ]
  },
  {
    "objectID": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide-2",
    "href": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide-2",
    "title": "7. Managing Growing Projects with Packages, Crates, and Modules",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "7. Managing Growing Projects with Packages, Crates, and Modules"
    ]
  },
  {
    "objectID": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide-3",
    "href": "slides/07-managing_growing_projects_with_packages_crates_and_modules.html#slide-3",
    "title": "7. Managing Growing Projects with Packages, Crates, and Modules",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "7. Managing Growing Projects with Packages, Crates, and Modules"
    ]
  },
  {
    "objectID": "slides/08-common_collections.html#slide",
    "href": "slides/08-common_collections.html#slide",
    "title": "8. Common Collections",
    "section": "SLIDE",
    "text": "SLIDE\n\nDENOTE MAJOR SECTIONS WITH # TITLE (eg # Installation)\nADD INDIVIDUAL SLIDES WITH ## (eg ## rustup on Linux/macOS)\nKEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "8. Common Collections"
    ]
  },
  {
    "objectID": "slides/08-common_collections.html#slide-1",
    "href": "slides/08-common_collections.html#slide-1",
    "title": "8. Common Collections",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "8. Common Collections"
    ]
  },
  {
    "objectID": "slides/08-common_collections.html#slide-2",
    "href": "slides/08-common_collections.html#slide-2",
    "title": "8. Common Collections",
    "section": "SLIDE",
    "text": "SLIDE",
    "crumbs": [
      "8. Common Collections"
    ]
  },
  {
    "objectID": "slides/08-common_collections.html#slide-3",
    "href": "slides/08-common_collections.html#slide-3",
    "title": "8. Common Collections",
    "section": "SLIDE",
    "text": "SLIDE\n\n\n\nDSLC.io/rust | DSLC.io",
    "crumbs": [
      "8. Common Collections"
    ]
  }
]